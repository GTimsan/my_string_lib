#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "s21_string.h"

char *str1 = "Salut";
char *str2 = "Salut\0Salut";
char *str3 = "異体字";
char *str4 = "\nSalut\t";
char *str5 = "Salut World";
char *str55 = "Salut World";
char *str6 = "Salut\tWorld";
char *str66 = "Salut\tWorld";
char *str7 = "Sa\0lut";
char *str77 = "Sa\0lut";
char str9[100];
char str10[100];
unsigned char strr1[20] = "Salut";
unsigned char strr2[20] = "\nSalut\t";
unsigned char strr3[20] = "Sa\0lut";
char strr4[100] = "Sa\0lut";
char strr5[100] = "Sa\0lut";
void* asd = s21_NULL;
int antigad = 42;
int antigadb = 21;
char hi[] = "abc";
char bye[] = "bca";
int num1 = 0;
int num2 = 0;
int num3 = 123;
char *symbols = "||||||123|||---dqwdsc23;;;alq.vmfj";
char *symbols1 = "        'ds;fsdlsdfks;df";
char *symbols2 = "13rcsaфыcak jio1    d  1k=----1-230412-,csdc1ł";
char a = {0}, aa = {0};
char b[1024] = "HHGHgftftf";
char c[1024] = "123";
char cc[1024] = "123";
char s[1024] = {0}, ss[1024] = {0};
unsigned int nu = 0, nu1 = 0, nuu = 0, nuu1 = 0;
float f = 0;
float d = 0;


#test MEMCHR
ck_assert_ptr_eq(memchr(str1, 't', 5), s21_memchr(str1, 't', 5));
ck_assert_ptr_eq(memchr(str6, '\t', 7), s21_memchr(str6, '\t', 7));
ck_assert_ptr_eq(memchr(str7, 'l', 5), s21_memchr(str7, 'l', 5));

#test MEMCMP
ck_assert_int_eq(s21_memcmp(str5, str55, 8), memcmp(str5, str55, 5));
ck_assert_int_eq(s21_memcmp(str6, str66, 8), memcmp(str6, str66, 8));
ck_assert_int_eq(s21_memcmp(str7, str77, 8), memcmp(str7, str77, 6));
ck_assert_int_eq(s21_memcmp(hi, bye, 2), memcmp(hi, bye, 2));

#test MEMCPY
// Узнать проверка стр или птр?
ck_assert_str_eq(memcpy(str9, str3, 7), s21_memcpy(str10, str3, 7));
ck_assert_str_eq(memcpy(str9, str6, 7), s21_memcpy(str10, str6, 7));
ck_assert_str_eq(memcpy(str9, str7, 7), s21_memcpy(str10, str7, 7));
ck_assert_str_eq(memcpy(str9, "", 1), s21_memcpy(str10, "", 1));
//ck_assert_pstr_eq(0, s21_memcpy(0, "f", 1));

#test MEMMOVE
// Узнать проверка стр или птр?
ck_assert_str_eq(memmove(str9, str3, 7), s21_memmove(str10, str3, 7));
ck_assert_str_eq(memmove(str9, str6, 7), s21_memmove(str10, str6, 7));
ck_assert_str_eq(memmove(str9, str7, 7), s21_memmove(str10, str7, 7));
ck_assert_str_eq(memmove(str9, "", 1), s21_memmove(str10, "", 1));

#test MEMSET
// char *a = s21_memset(strr1, 'p', 3);
// char *b = s21_memset(strr2, 'p', 3);
// char *c = s21_memset(strr3, 'p', 3);
// printf("\n%s\n\n", a);
// printf("\n%s\n\n", b);
// printf("\n%s\n\n", c);
// printf("\n%p\n\n", s21_memchr(str1, 'l', 4));
// printf("\n%p\n\n", memchr(str1, 'l', 4));
ck_assert_str_eq(memset(strr1, 'p', 3), s21_memset(strr1, 'p', 3));
ck_assert_str_eq(memset(strr2, 'p', 3), s21_memset(strr2, 'p', 3));
ck_assert_str_eq(memset(strr3, 'p', 3), s21_memset(strr3, 'p', 3));

#test STRCAT
ck_assert_str_eq(strcat(str9, str4), s21_strcat(str10, str4));
ck_assert_str_eq(strcat(strr4, str7), s21_strcat(strr5, str7));
ck_assert_str_eq(strcat(str9, str5), s21_strcat(str10, str5));

#test STRNCAT
ck_assert_str_eq(strncat(str9, str4, 5), s21_strncat(str10, str4, 5));
ck_assert_str_eq(strncat(strr4, str7, 3), s21_strncat(strr5, str7, 3));
ck_assert_str_eq(strncat(str9, str5, 7), s21_strncat(str10, str5, 7));

#test STRCHR
ck_assert_ptr_eq(strchr(str1, 'l'), s21_strchr(str1, 'l'));
ck_assert_ptr_eq(strchr(str7, '\0'), s21_strchr(str7, '\0'));
ck_assert_ptr_eq(strchr(str6, '\t'), s21_strchr(str6, '\t'));

#test STRCMP
ck_assert_int_eq(strcmp(str5, str55), s21_strcmp(str5, str55));
ck_assert_int_eq(strcmp(str6, str66), s21_strcmp(str6, str66));
ck_assert_int_eq(strcmp(str7, str77), s21_strcmp(str7, str77));

#test STRNCMP
ck_assert_int_eq(strncmp(str5, str55, 9), s21_strncmp(str5, str55, 9));
ck_assert_int_eq(strncmp(str6, str66, 10), s21_strncmp(str6, str66, 10));
ck_assert_int_eq(strncmp(str7, str77, 5), s21_strncmp(str7, str77, 5));

#test STRCPY
ck_assert_str_eq(strcpy(str9, str6), s21_strcpy(str10, str6));
ck_assert_str_eq(strcpy(str9, str7), s21_strcpy(str10, str7));
ck_assert_str_eq(strcpy(str9, str3), s21_strcpy(str10, str3));
ck_assert_str_eq(strcpy(str9, str4), s21_strcpy(str10, str4));

#test STRNCPY
ck_assert_str_eq(strncpy(str9, str6, 8), s21_strncpy(str10, str6, 8));
ck_assert_str_eq(strncpy(str9, str7, 4), s21_strncpy(str10, str7, 4));
ck_assert_str_eq(strncpy(strr4, str3, 6), s21_strncpy(strr5, str3, 6));
ck_assert_str_eq(strncpy(strr4, str4, 7), s21_strncpy(strr5, str4, 7));

#test STRCSPN
ck_assert_int_eq(strcspn(str1, "ut"),s21_strcspn(str1, "ut"));
ck_assert_int_eq(strcspn(str4, "\t"),s21_strcspn(str4, "\t"));
ck_assert_int_eq(strcspn(str6, "W"),s21_strcspn(str6, "W"));

#test STRERROR
char *err1 = strerror(0);
char *err2 = s21_strerror(0);
ck_assert_str_eq(err1, err2);

for (int i = 0; i <= 106; i++) {
ck_assert_str_eq(strerror(i), s21_strerror(i));
}

char *err3 = strerror(200);
char *err4 = s21_strerror(200);
ck_assert_str_eq(err3, err4);

for (int i = -100; i < 0; i++) {
ck_assert_str_eq(strerror(i), s21_strerror(i));
}

#test STRLEN
ck_assert_int_eq(strlen(str1), s21_strlen(str1));
ck_assert_int_eq(strlen(str2), s21_strlen(str2));
ck_assert_int_eq(strlen(str3), s21_strlen(str3));
ck_assert_int_eq(strlen(str4), s21_strlen(str4));
ck_assert_int_eq(strlen(""), s21_strlen(""));

#test STRPBRK
ck_assert_ptr_eq(strpbrk(str4, "\t"), s21_strpbrk(str4, "\t"));
ck_assert_ptr_eq(strpbrk(str6, "W"), s21_strpbrk(str6, "W"));
ck_assert_ptr_eq(strpbrk(str2, "sAL"), s21_strpbrk(str2, "sAL"));

#test STRRCHR
ck_assert_ptr_eq(strrchr(str4, 'u'), s21_strrchr(str4, 'u'));
ck_assert_ptr_eq(strrchr(str6, 'W'), s21_strrchr(str6, 'W'));
ck_assert_ptr_eq(strrchr(str4, '\t'), s21_strrchr(str4, '\t'));

#test STRSPN
ck_assert_int_eq(strspn(str2, "Sa"), s21_strspn(str2, "Sa"));
ck_assert_int_eq(strspn(str6, "World"), s21_strspn(str6, "World"));
ck_assert_int_eq(strspn(str7, "Salu"), s21_strspn(str7, "Salu"));

#test STRSTR
ck_assert_ptr_eq(strstr(str4, "lut"), s21_strstr(str4, "lut"));
ck_assert_ptr_eq(strstr(str6, "World"), s21_strstr(str6, "World"));
ck_assert_ptr_eq(strstr(str7, "Salu"), s21_strstr(str7, "Salu"));
ck_assert_ptr_eq(strstr(str7, "0"), s21_strstr(str7, "0"));

#test STRTOK
// printf("fsdfsf");
char for_tok[] = "word1/word2/word3";
char for_tok2[] = "word1/word2/word3";
char* del1 = "/";
// char* a;
// for (; *a; a++){
char* istr = strtok(for_tok, del1);
char* istr2 = s21_strtok(for_tok2, del1);
ck_assert_str_eq(istr, istr2);

#test SPRINTF
char sprintf1[1024] = {0};
char sprintf2[1024] = {0};
// tests %d -------------------------------------------------------
s21_sprintf(sprintf1, "%1.1d", -20);
sprintf(sprintf2, "%1.1d", -20);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%2d", -20);
sprintf(sprintf2, "%2d", -20);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10d", -50);
sprintf(sprintf2, "%-10d", -50);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%2d", -50);
sprintf(sprintf2, "%2d", -50);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.2d", -20);
sprintf(sprintf2, "%.2d", -20);
ck_assert_str_eq(sprintf1, sprintf2);
char arr1[1024] = {0};
char arr2[1024] = {0};
s21_sprintf(arr1, "%10.5d", 101);
sprintf(arr2, "%10.5d", 101);
ck_assert_str_eq(arr1, arr2);
s21_sprintf(sprintf1, "%5.10d", 64);
sprintf(sprintf2, "%5.10d", 64);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10d", -80);
sprintf(sprintf2, "%-10d", -80);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-.10d", -80);
sprintf(sprintf2, "%-.10d", -80);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+6d", 35);
sprintf(sprintf2, "%+6d", 35);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+6d", -35);
sprintf(sprintf2, "%+6d", -35);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+5.3d", 5);
sprintf(sprintf2, "%+5.3d", 5);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+3.5d", 5);
sprintf(sprintf2, "%+3.5d", 5);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+5.3d", -5);
sprintf(sprintf2, "%+5.3d", -5);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+3.5d", -5);
sprintf(sprintf2, "%+3.5d", -5);
ck_assert_str_eq(sprintf1, sprintf2);
char ssp1[100] = {0};
char ssp2[100] = {0};
s21_sprintf(ssp1, "%+.d", 0);
sprintf(ssp2, "%+.d", 0);
ck_assert_str_eq(ssp1, ssp2);
s21_sprintf(sprintf1, "%+.d", 100);
sprintf(sprintf2, "%+.d", 100);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "% ld", 9223372036854775807);
sprintf(sprintf2, "% ld", 9223372036854775807);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+hd", 123123123);
sprintf(sprintf2, "%+hd", 123123123);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.d", 0);
sprintf(sprintf2, "%.d", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%5.d", 0);
sprintf(sprintf2, "%5.d", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%5.0d", 0);
sprintf(sprintf2, "%5.0d", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-5.d", 0);
sprintf(sprintf2, "%-5.d", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.0d", 0);
sprintf(sprintf2, "%.0d", 0);
ck_assert_str_eq(sprintf1, sprintf2);

// ------------------------------------------------------------
// tests %f
char sprintf3[1024] = {0};
char sprintf4[1024] = {0};
s21_sprintf(sprintf1, "%f", 324.34);
sprintf(sprintf2, "%f", 324.34);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf3, "%10f", 324.343);
sprintf(sprintf4, "%10f", 324.343);
ck_assert_str_eq(sprintf3, sprintf4);
s21_sprintf(sprintf1, "%10.3f", 324.343);
sprintf(sprintf2, "%10.3f", 324.343);
ck_assert_str_eq(sprintf1, sprintf2);
// s21_sprintf(sprintf1, "%1.30f", 324.343);
// sprintf(sprintf2, "%1.30f", 324.343);
// ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf3, "%-1.10f", 324.343);
sprintf(sprintf4, "%-1.10f", 324.343);
ck_assert_str_eq(sprintf3, sprintf4);
s21_sprintf(sprintf1, "%-1.10f", -324.343);
sprintf(sprintf2, "%-1.10f", -324.343);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.10f", -324.343);
sprintf(sprintf2, "%.10f", -324.343);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.10f", 324.343);
sprintf(sprintf2, "%.10f", 324.343);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "% 10f", 324.1);
sprintf(sprintf2, "% 10f", 324.1);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%+10f", 324.1);
sprintf(sprintf2, "%+10f", 324.1);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.0f", 324.1123132);
sprintf(sprintf2, "%.0f", 324.1123132);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%10.10f", 320.3);
sprintf(sprintf2, "%10.10f", 320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10.10f", 320.3);
sprintf(sprintf2, "%-10.10f", 320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10.10f", 320.3);
sprintf(sprintf2, "%-10.10f", 320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10.10f", -320.3);
sprintf(sprintf2, "%-10.10f", -320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.0f", -320.3);
sprintf(sprintf2, "%.0f", -320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.0f", -320.3);
sprintf(sprintf2, "%.0f", -320.3);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "% -5.1f", 0.001);
sprintf(sprintf2, "% -5.1f", 0.001);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%5.1f", 324.324);
sprintf(sprintf2, "%5.1f", 324.324);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%5.3f", 0.0001);
sprintf(sprintf2, "%5.3f", 0.0001);
ck_assert_str_eq(sprintf1, sprintf2);
// ----------------------------------------------
// test %u
s21_sprintf(sprintf1, "%u", -34);
sprintf(sprintf2, "%u", -34);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-u", 50);
sprintf(sprintf2, "%-u", 50);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%10u", 90);
sprintf(sprintf2, "%10u", 90);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.10u", 90);
sprintf(sprintf2, "%.10u", 90);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%15u", -100);
sprintf(sprintf2, "%15u", -100);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%10.5u", 52);
sprintf(sprintf2, "%10.5u", 52);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%5.10u", 52);
sprintf(sprintf2, "%5.10u", 52);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%20.15u", -100000);
sprintf(sprintf2, "%20.15u", -100000);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%15.20u", -100000);
sprintf(sprintf2, "%15.20u", -100000);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-10u", 144);
sprintf(sprintf2, "%-10u", 144);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-.10u", 144);
sprintf(sprintf2, "%-.10u", 144);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%-20u", -20000000);
sprintf(sprintf2, "%-20u", -20000000);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%u", 0);
sprintf(sprintf2, "%u", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.u", 0);
sprintf(sprintf2, "%.u", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%10u", 0);
sprintf(sprintf2, "%10u", 0);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%.u", 88);
sprintf(sprintf2, "%.u", 88);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf1, "%u", -1);
sprintf(sprintf2, "%u", -1);
ck_assert_str_eq(sprintf1, sprintf2);
s21_sprintf(sprintf3, "%-20.18u", -345);
sprintf(sprintf4, "%-20.18u", -345);
ck_assert_str_eq(sprintf3, sprintf4);
// -------------------------------------------------------
// test %c
char sprintf7[100] = {0};
char sprintf8[100] = {0};
s21_sprintf(sprintf1, "%c", 'a');
sprintf(sprintf2, "%c", 'a');
ck_assert_str_eq(sprintf1, sprintf2);

s21_sprintf(sprintf1, "%-c", 'z');
sprintf(sprintf2, "%-c", 'z');
ck_assert_str_eq(sprintf1, sprintf2);

s21_sprintf(sprintf1, "%5c", 'R');
sprintf(sprintf2, "%5c", 'R');
ck_assert_str_eq(sprintf1, sprintf2);

s21_sprintf(sprintf1, "%-5c", 'R');
sprintf(sprintf2, "%-5c", 'R');
ck_assert_str_eq(sprintf1, sprintf2);

s21_sprintf(sprintf1, "%1c", '3');
sprintf(sprintf2, "%1c", '3');
ck_assert_str_eq(sprintf1, sprintf2);

s21_sprintf(sprintf7, "%c", '\0');
sprintf(sprintf8, "%c", '\0');
ck_assert_str_eq(sprintf7, sprintf8);

s21_sprintf(sprintf7, "%5c", '\0');
sprintf(sprintf8, "%5c", '\0');
ck_assert_str_eq(sprintf7, sprintf8);

char rts1[100] = {0};
char rts2[100] = {0};
s21_sprintf(rts1, "%-5c", '\0');
sprintf(rts2, "%-5c", '\0');
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%1c", '\0');
sprintf(rts2, "%1c", '\0');
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%s", "salut");
sprintf(rts2, "%s", "salut");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%-s", "test");
sprintf(rts2, "%-s", "test");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%10s", "42");
sprintf(rts2, "%10s", "42");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%-10s", "42");
sprintf(rts2, "%-10s", "42");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%2s", "string");
sprintf(rts2, "%2s", "string");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%.15s", "precision");
sprintf(rts2, "%.15s", "precision");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%.4s", "precision");
sprintf(rts2, "%.4s", "precision");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%.0s", "precision");
sprintf(rts2, "%.0s", "precision");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%s", "\0\0\0\0\0");
sprintf(rts2, "%s", "\0\0\0\0\0");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%10s", "\0\0\0\0\0");
sprintf(rts2, "%10s", "\0\0\0\0\0");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%s", "");
sprintf(rts2, "%s", "");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%10.8s", "google");
sprintf(rts2, "%10.8s", "google");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%10.2s|", "twitter");
sprintf(rts2, "%10.2s|", "twitter");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%2.10s", "samsung");
sprintf(rts2, "%2.10s", "samsung");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%2.5s", "sprintf");
sprintf(rts2, "%2.5s", "sprintf");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%1.0s", "123456789");
sprintf(rts2, "%1.0s", "123456789");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%.1s", "covid-19");
sprintf(rts2, "%.1s", "covid-19");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%10.2s", "covid-19");
sprintf(rts2, "%10.2s", "covid-19");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%2.5s", "covid-19");
sprintf(rts2, "%2.5s", "covid-19");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "01)SPRINTF : |%1.4s| et |%-6.8s| et |%4.2s|\n", "tuuu", "12345", "hu");
sprintf(rts2, "01)SPRINTF : |%1.4s| et |%-6.8s| et |%4.2s|\n", "tuuu", "12345", "hu");
ck_assert_str_eq(rts1, rts2);

// s21_sprintf(rts1, "", );
// sprintf(rts2, "", );
// ck_assert_str_eq(rts1, rts2);

// -------------------------------------------------------
// test %s
// #test SPRINTF2
s21_sprintf(rts1, "%8s", "abra");
sprintf(rts2, "%8s", "abra");
ck_assert_str_eq(rts1, rts2);


s21_sprintf(rts1, "%8s", "abra");
sprintf(rts2, "%8s", "abra");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%8s", "abrafdefgbr");
sprintf(rts2, "%8s", "abrafdefgbr");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%8s", "abra");
sprintf(rts2, "%8s", "abra");
ck_assert_str_eq(rts1, rts2);

s21_sprintf(rts1, "%.s", "1234567890123fsfbdfbdfvbbdvbvb");
sprintf(rts2, "%.s", "1234567890123fsfbdfbdfvbbdvbvb");
ck_assert_str_eq(rts1, rts2);

char str[100];
char str1[100];
int dragon = 10, sobaka = 20, koshka;
koshka = dragon + sobaka;
sprintf(str, "Sum of %d and %d is %d", dragon, sobaka, koshka);
s21_sprintf(str1, "Sum of %d and %d is %d", dragon, sobaka, koshka);
ck_assert_str_eq(str, str1);
sprintf(str, "Chislo:|%-5s|kust and |%9c|. This sum is |%i|. This is |%%|. And now unsigned: |%u|\n",
        "abra", 'e', 56, -43);
s21_sprintf(str1, "Chislo:|%-5s|kust and |%9c|. This sum is |%i|. This is |%%|. And now unsigned: |%u|\n",
            "abra", 'e', 56, -43);
ck_assert_str_eq(str, str1);
sprintf(str, "Sum of %d and %d is %d", dragon, sobaka, koshka);
s21_sprintf(str1, "Sum of %d and %d is %d", dragon, sobaka, koshka);

sprintf(str, "Chislo:|%-5s|kust and |%9c|. This sum is |%i|. This is |%%|. And now unsigned: |%u|\n",
        "abra", 'e', 56, -43);
s21_sprintf(str1, "Chislo:|%-5s|kust and |%9c|. This sum is |%i|. This is |%%|. And now unsigned: |%u|\n",
            "abra", 'e', 56, -43);
ck_assert_str_eq(str, str1);

